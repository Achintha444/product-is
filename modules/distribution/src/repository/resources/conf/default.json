{
  "identity.auth_framework.proxy_mode": "smart",
  "identity.auth_framework.login_page_url": "/authenticationendpoint/login.do",
  "identity.auth_framework.retry_page_url": "/authenticationendpoint/retry.do",
  "identity.auth_framework.request_claim_page_url": "/authenticationendpoint/claims.do",
  "identity.auth_framework.request_coordinator": "org.wso2.carbon.identity.application.authentication.framework.handler.request.impl.DefaultRequestCoordinator",
  "identity.auth_framework.auth_request_handler": "org.wso2.carbon.identity.application.authentication.framework.handler.request.impl.DefaultAuthenticationRequestHandler",
  "identity.auth_framework.logout_request_handler": "org.wso2.carbon.identity.application.authentication.framework.handler.request.impl.DefaultLogoutRequestHandler",
  "identity.auth_framework.step_based_sequence_handler": "org.wso2.carbon.identity.application.authentication.framework.handler.sequence.impl.GraphBasedSequenceHandler",
  "identity.auth_framework.request_path_based_sequence_handler": "org.wso2.carbon.identity.application.authentication.framework.handler.sequence.impl.DefaultRequestPathBasedSequenceHandler",
  "identity.auth_framework.step_handler": "org.wso2.carbon.identity.application.authentication.framework.handler.step.impl.GraphBasedStepHandler",
  "identity.auth_framework.home_realm_discoverer": "org.wso2.carbon.identity.application.authentication.framework.handler.hrd.impl.DefaultHomeRealmDiscoverer",
  "identity.auth_framework.claim_handler": "org.wso2.carbon.identity.application.authentication.framework.handler.claims.impl.DefaultClaimHandler",
  "identity.auth_framework.provisioning_handler": "org.wso2.carbon.identity.application.authentication.framework.handler.provisioning.impl.DefaultProvisioningHandler",
  "identity.auth_framework.authenticators": [
    {
      "name": "BasicAuthenticator",
      "alias": "basic",
      "parameters": {
        "AuthMechanism": "basic"
      }
    },
    {
      "name": "OAuthRequestPathAuthenticator",
      "alias": "oauth-bearer"
    },
    {
      "name": "IWAAuthenticator",
      "alias": "iwa"
    },
    {
      "name": "SAMLSSOAuthenticator",
      "alias": "samlsso"
    },
    {
      "name": "OpenIDConnectAuthenticator",
      "alias": "openidconnect"
    },
    {
      "name": "PassiveSTSAuthenticator",
      "alias": "passive-sts"
    },
    {
      "name": "BasicAuthRequestPathAuthenticator",
      "alias": "basic-auth",
      "parameters": {
        "AuthMechanism": "basic"
      }
    },
    {
      "name": "IdentifierExecutor",
      "parameters": {
        "ValidateUsername": "false"
      }
    },
    {
      "name": "FIDOAuthenticator",
      "parameters": {
        "FidoAuth": "/authenticationendpoint/fido-auth.jsp"
      }
    },
    {
      "name": "GoogleOIDCAuthenticator",
      "parameters": {
        "GoogleTokenEndpoint": "https://accounts.google.com/o/oauth2/token",
        "GoogleAuthzEndpoint": "https://accounts.google.com/o/oauth2/auth",
        "GoogleUserInfoEndpoint": "https://www.googleapis.com/oauth2/v3/userinfo"
      }
    },
    {
      "name": "MicrosoftWindowsLive",
      "parameters": {
        "AuthTokenEndpoint": "https://login.live.com/oauth20_token.srf",
        "AuthnEndpoint": "https://login.live.com/oauth20_authorize.srf",
        "UserInfoEndpoint": "https://apis.live.net/v5.0/me?access_token="
      }
    },
    {
      "name": "FacebookAuthenticator",
      "parameters": {
        "AuthTokenEndpoint": "https://graph.facebook.com/oauth/access_token",
        "AuthnEndpoint": "http://www.facebook.com/dialog/oauth",
        "UserInfoEndpoint": "https://graph.facebook.com/me"
      }
    },
    {
      "name": "YahooOAuth2Authenticator",
      "parameters": {
        "YahooTokenEndpoint": "https://api.login.yahoo.com/oauth2/get_token",
        "YahooOAuthzEndpoint": "https://api.login.yahoo.com/oauth2/request_auth",
        "YahooUserInfoEndpoint": "https://social.yahooapis.com/v1/user/"
      }
    },
    {
      "name": "MobileConnectAuthenticator",
      "parameters": {
        "MCAuthenticationEndpointURL": "mobileconnectauthenticationendpoint/mobileconnect.jsp",
        "MCDiscoveryAPIURL": "https://discover.mobileconnect.io/gsma/v2/discovery/",
        "redirectToMultiOptionPageOnFailure": "false"
      }
    },
    {
      "name": "EmailOTP",
      "parameters": {
        "GmailClientId": "gmailClientIdValue",
        "GmailClientSecret": "gmailClientSecretValue",
        "SendgridAPIKey": "sendgridAPIKeyValue",
        "GmailRefreshToken": "gmailRefreshTokenValue",
        "GmailEmailEndpoint": "https://www.googleapis.com/gmail/v1/users/[userId]/messages/send",
        "SendgridEmailEndpoint": "https://api.sendgrid.com/api/mail.send.json",
        "accessTokenRequiredAPIs": "Gmail",
        "apiKeyHeaderRequiredAPIs": "Sendgrid",
        "SendgridFormData": "sendgridFormDataValue",
        "SendgridURLParams": "sendgridURLParamsValue",
        "GmailAuthTokenType": "Bearer",
        "GmailTokenEndpoint": "https://www.googleapis.com/oauth2/v3/token",
        "SendgridAuthTokenType": "Bearer",
        "redirectToMultiOptionPageOnFailure": false
      }
    },
    {
      "name": "SMSOTP",
      "parameters": {
        "SMSOTPAuthenticationEndpointURL": "smsotpauthenticationendpoint/smsotp.jsp",
        "SMSOTPAuthenticationEndpointErrorPage": "smsotpauthenticationendpoint/smsotpError.jsp",
        "MobileNumberRegPage": "smsotpauthenticationendpoint/mobile.jsp",
        "RetryEnable": true,
        "ResendEnable": true,
        "BackupCode": true,
        "SMSOTPEnableByUserClaim": true,
        "SMSOTPMandatory": false,
        "CaptureAndUpdateMobileNumber": true,
        "SendOTPDirectlyToMobile": false,
        "redirectToMultiOptionPageOnFailure": false
      }
    },
    {
      "name": "x509CertificateAuthenticator",
      "parameters": {
        "AuthenticationEndpoint": "https://localhost:8443/x509-certificate-servlet",
        "username": "CN"
      }
    }
  ],
  "identity.auth_framework.outbound_query_parameter_filter_policy" : "exclude",
  "identity.auth_framework.filtered_outbound_query_parameters": ["username","password","SAMLRequest"],
  "identity.auth_framework.redirect_parameter_filter_policy" : "exclude",
  "identity.auth_framework.redirect_parameter_remove_on_consume" : true,
  "identity.auth_framework.filtered_redirect_parameters": ["loggedInUser"],


  "identity.recaptcha.enabled" : false,
  "identity.recaptcha.api_url" : "https://www.google.com/recaptcha/api.js",
  "identity.recaptcha.verify_url" : "https://www.google.com/recaptcha/api/siteverify",


  "identity.charon.properties": {
    "user-schema-extension-enabled": true,
    "patch-supported" : true,
    "documentationUri" : "http://example.com/help/scim.html",
    "bulk-supported" : true,
    "bulk-maxOperations" : "1000",
    "bulk-maxPayloadSize": "1048576",
    "filter-supported" : true,
    "filter-maxResults" : "200",
    "changePassword" : true,
    "sort-supported": false,
    "etag-supported" : false,
    "pagination-default-count" : "100"
  },
  "identity.charon.enabled_auth_schemes": ["oauth_bearer","http_basic"],
  "identity.charon.authentication_schemes":{
    "oauth_bearer": {
      "name": "OAuth Bearer Token",
      "description": "Authentication scheme using the OAuth Bearer Token Standard",
      "specUri": "http://www.rfc-editor.org/info/rfc6750",
      "documentationUri": "http://example.com/help/oauth.html",
      "type": "oauthbearertoken",
      "primary": true
    },
    "http_basic": {
      "name": "HTTP Basic",
      "description": "Authentication scheme using the HTTP Basic Standard",
      "specUri": "http://www.rfc-editor.org/info/rfc2617",
      "documentationUri": "http://example.com/help/httpBasic.html",
      "type": "httpbasic",
      "primary": false
    }
  },


  "identity.auth_framework.endpoint.tenant_list_enabled" : false,
  "identity.auth_framework.endpoint.mutual_ssl_manager_enabled" : true,



  "identity.entitlement.policy_point.pdp.enabled": false,
  "identity.entitlement.policy_point.pdp.default_caching_interval": "300",
  "identity.entitlement.policy_point.pdp.caching.decision_caching.enabled": true,
  "identity.entitlement.policy_point.pdp.caching.decision_caching.caching_interval": "$conf{identity.entitlement.policy_point.pdp.default_caching_interval}",
  "identity.entitlement.policy_point.pdp.caching.attribute_caching.enabled": true,
  "identity.entitlement.policy_point.pdp.caching.attribute_caching.caching_interval": "$conf{identity.entitlement.policy_point.pdp.default_caching_interval}",
  "identity.entitlement.policy_point.pdp.caching.resource_caching.enabled": true,
  "identity.entitlement.policy_point.pdp.caching.resource_caching.caching_interval": "$conf{identity.entitlement.policy_point.pdp.default_caching_interval}",
  "identity.entitlement.policy_point.pdp.caching.policy_caching.caching_interval": "100",
  "identity.entitlement.policy_point.pdp.schema_validation_enabled": true,
  "identity.entitlement.policy_point.pdp.balana_config_enabled": true,
  "identity.entitlement.policy_point.pdp.multiple_decision_profile_enabled": true,
  "identity.entitlement.policy_point.pdp.global_policy_combining_algorithm": "urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:deny-overrides",
  "identity.entitlement.policy_point.pdp.registry_level_policy_cache_clear": false,
  "identity.entitlement.policy_point.pdp.reference_max_policy_entries": "3000",
  "identity.entitlement.policy_point.pdp.policy_finders": [
    "org.wso2.carbon.identity.entitlement.policy.store.RegistryPolicyStoreManageModule"
  ],
  "identity.entitlement.policy_point.pdp.policy_store_module": "org.wso2.carbon.identity.entitlement.policy.store.RegistryPolicyStoreManageModule",
  "identity.entitlement.policy_point.pdp.policy_data_store_module": "org.wso2.carbon.identity.entitlement.policy.store.DefaultPolicyDataStore",
  "identity.entitlement.policy_point.pap.enabled": true,
  "identity.entitlement.policy_point.pap.policy_add_start_enable": true,
  "identity.entitlement.policy_point.pap.items_per_page": "10",
  "identity.entitlement.policy_point.pap.entitlement_data_finders": [
    "org.wso2.carbon.identity.entitlement.pap.CarbonEntitlementDataFinder"
  ],
  "identity.entitlement.policy_point.pap.policy_publisher_modules": [
    "org.wso2.carbon.identity.entitlement.policy.publisher.CarbonBasicPolicyPublisherModule"
  ],
  "identity.entitlement.policy_point.pap.policy_version_module": "org.wso2.carbon.identity.entitlement.policy.version.DefaultPolicyVersionManager",
  "identity.entitlement.policy_point.pap.status_data_handlers": [
    "org.wso2.carbon.identity.entitlement.SimplePAPStatusDataHandler"
  ],
  "identity.entitlement.policy_point.pip.attribute_designators": [
    "org.wso2.carbon.identity.entitlement.pip.DefaultAttributeFinder",
    "org.wso2.carbon.identity.application.authz.xacml.pip.AuthenticationContextAttributePIP"
  ],
  "identity.entitlement.policy_point.pip.resource_finders": [
    "org.wso2.carbon.identity.entitlement.pip.DefaultResourceFinder"
  ],
  "identity.entitlement.entitlement_engine_caching_interval": "100000",
  "identity.entitlement.JSON_shorten_form_enabled": false,


  "identity.events.threadPool_size": "10",
  "identity.events.schemes": {
    "account.lock.handler": {
      "subscriptions": [
        "PRE_AUTHENTICATION",
        "POST_AUTHENTICATION",
        "PRE_SET_USER_CLAIMS",
        "POST_SET_USER_CLAIMS"
      ],
      "properties": {
        "enable": false,
        "login.fail.timeout.ratio": "2",
        "On.Failure.Max.Attempts": "5",
        "Time": "5",
        "notification.manageInternally": true
      }
    },
    "emailSend": {
      "subscriptions": [
        "TRIGGER_NOTIFICATION"
      ]
    },
    "accountConfirmationValidation": {
      "subscriptions": [
        "PRE_AUTHENTICATION"
      ]
    },
    "passwordHistory": {
      "subscriptions": [
        "PRE_UPDATE_CREDENTIAL",
        "PRE_UPDATE_CREDENTIAL_BY_ADMIN",
        "POST_UPDATE_CREDENTIAL",
        "POST_UPDATE_CREDENTIAL_BY_ADMIN",
        "POST_ADD_USER",
        "POST_DELETE_USER"
      ],
      "properties": {
        "enable": false,
        "count": "5",
        "hashingAlgorithm": "SHA-256",
        "dataStore": "org.wso2.carbon.identity.password.history.store.Impl.DefaultPasswordHistoryDataStore"
      }
    },
    "account.disable.handler": {
      "subscriptions": [
        "PRE_AUTHENTICATION",
        "PRE_SET_USER_CLAIMS",
        "POST_SET_USER_CLAIMS"
      ],
      "properties": {
        "enable": false,
        "notification.manageInternally": true
      }
    },
    "userSelfRegistration": {
      "subscriptions": [
        "POST_ADD_USER"
      ]
    },
    "userEmailVerification": {
      "subscriptions": [
        "PRE_ADD_USER",
        "POST_ADD_USER"
      ]
    },
    "passwordPolicy": {
      "subscriptions": [
        "PRE_UPDATE_CREDENTIAL",
        "PRE_UPDATE_CREDENTIAL_BY_ADMIN",
        "PRE_ADD_USER"
      ],
      "properties": {
        "min.length": "6",
        "max.length": "12",
        "pattern": "^((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%&*])).{0,100}$",
        "errorMsg": "'Password pattern policy violated. Password should contain a digit[0-9], a lower case letter[a-z], an upper case letter[A-Z], and one of !@#$%&* characters'",
        "class.PasswordLengthPolicy": "org.wso2.carbon.identity.mgt.policy.password.DefaultPasswordLengthPolicy",
        "class.PasswordNamePolicy": "org.wso2.carbon.identity.mgt.policy.password.DefaultPasswordNamePolicy",
        "class.PasswordPatternPolicy": "org.wso2.carbon.identity.mgt.policy.password.DefaultPasswordPatternPolicy",
        "enable": false
      }
    },
    "adminForcedPasswordReset": {
      "subscriptions": [
        "PRE_SET_USER_CLAIMS",
        "PRE_AUTHENTICATION"
      ]
    },
    "suspension.notification": {
      "subscriptions": [
        "POST_AUTHENTICATION"
      ],
      "properties": {
        "enable": false,
        "account.disable.delay": "90",
        "trigger.time": "20:00:00",
        "delays": "30,45,60,75"
      }
    },
    "handleRequestObject": {
      "subscriptions": [
        "POST_REVOKE_ACESS_TOKEN",
        "POST_REVOKE_CODE",
        "POST_REVOKE_ACESS_TOKEN_BY_ID",
        "POST_REVOKE_CODE_BY_ID",
        "POST_REFRESH_TOKEN",
        "POST_ISSUE_CODE",
        "POST_ISSUE_ACCESS_TOKEN"
      ]
    },
    "user.consent.delete": {
      "subscriptions": [
        "POST_DELETE_USER"
      ],
      "properties": {
        "receipt.search.limit": "500"
      }
    },
    "authenticationAuditLogger": {
      "subscriptions": [
        "AUTHENTICATION_STEP_SUCCESS",
        "AUTHENTICATION_STEP_FAILURE",
        "AUTHENTICATION_SUCCESS",
        "AUTHENTICATION_FAILURE",
        "SESSION_TERMINATE"
      ],
      "properties": {
        "enable": true
      }
    },
    "analyticsLoginDataPublisher": {
      "subscriptions": [
        "AUTHENTICATION_STEP_SUCCESS",
        "AUTHENTICATION_STEP_FAILURE",
        "AUTHENTICATION_SUCCESS",
        "AUTHENTICATION_FAILURE"
      ],
      "properties": {
        "enable": false
      }
    },
    "analyticsSessionDataPublisher": {
      "subscriptions": [
        "SESSION_CREATE",
        "SESSION_UPDATE",
        "SESSION_TERMINATE"
      ],
      "properties": {
        "enable": false
      }
    },
    "failLoginAttemptValidator": {
      "subscriptions": [
        "AUTHENTICATION_STEP_FAILURE"
      ],
      "properties": {
        "enable": true
      }
    },
    "SAMLLogoutHandler": {
      "subscriptions": [
        "SESSION_TERMINATE"
      ],
      "properties": {
        "enable": true
      }
    },
    "OIDCLogoutHandler": {
      "subscriptions": [
        "SESSION_TERMINATE"
      ],
      "properties": {
        "enable": false
      }
    },
    "confirmationCodesInvalidate": {
      "subscriptions": [
        "POST_DELETE_USER"
      ]
    }
  }
}
